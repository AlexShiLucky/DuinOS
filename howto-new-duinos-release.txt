Como criar um novo release do DuinOS atualizando das partes do FreeRTOS e Arduino IDE.

Testado no upgrade do DuinOS 0.4 para o DuinOS 0.6.1
* Upgrade Arduino IDE para 1.5
* Upgrade FreeRTOS 7.3.0 (HEAD GIT em 29/10/2012)

1) Criei um novo Branch Chamado "DuinOS_V0.6.1"

2) Criei uma pasta chamada arduino.DuinOS.AVR/DuinOS onde estão todos os arquivos do FreeRTOS,
você precisa copiar os seguintes arquivos para a pasta.

a) do FreeRTOSVx.x.x/Source/
croutine.c
list.c
queue.c
tasks.c

b) do FreeRTOSVx.x.x/Source/include/
croutine.h
FreeRTOS.h
list.h
mpu_wrappers.h
portable.h
projdefs.h
queue.h
semphr.h
StackMacros.h
task.h

c) do FreeRTOSVx.x.x/Source/portable/MemMang/
heap_1.c
heap_2.c
heap_3.c

c) do FreeRTOSVx.x.x/Source/portable/GCC/ATMega323/ 
port.c
portmacro.h
port.c (arquivo atualizado para dar suporte aos chips Atmel AtMega

3) agora é preciso aplicar o patch ao arquivo arduino.DuinOS.AVR/DuinOS/port.c 
   como apresentado no arquivo port.c.path

4) No diretorio arduino.DuinOS.AVR, você precisa copiar todos os arquivos
   para o diretorio arduino-00xx/hardware/arduino/avr/cores/arduino:

5) aplicar os respectivos patch nos seguintes arquivos:

* Arduino.h / Adicionar a carga do cabeçalho DuinOS.h, remover a definição
  da função delay(), esta será definida como macro no arquivo DuinOS.h
* wiring.c / desabilitar a função delay porque o DuinOS sobrescreve com um
  macro definida no arquivo DuinOS.h 
  desabilitar a configuração do timer1 porque o DuinOS sobreescreve esta função
  com uma macro definda no arquivo DuinOS.h
* wiring_analog.c / Já que o DuinOS usa o timer 1 para este kernel, desabilita
  TIMER1A e TIMER1B

6) Obter os seguintes arquivos de um release anterior do DuinOS:
DuinOS.h 
FreeRTOSConfig.h
e copiar na pasta arduino.DuinOS.AVR.

7) Copiar a pasta  examples/ de um release anterior para o no branch
   mantendo o nome

8) Copiar a pasta hardware/arduino/avr/board.txt in hardware folder and patch it with the following patch :


9) Copiar lib/keywords.txt em lib e aplicar o respectivo patch:
 

9) Copiar o arquivo libraries/Servo/Servo.h em libraries/Servo e aplicar o 
respectivo patch para desabilitar o uso do Timer1 porque DuinOS usa este timer
em seu kernel. 

10) Copiar o arquivo libraries/Servo/Servo.cpp no diretorio DuinOS_v0.x/libraries/Servo 
e aplicar o respectivo path, porque o DuinOS usa o Timer 1 em seu kernel 


11) Já que em alguns chips como o AtMega 168 e 328, Timer1 é desabilitado 
porque DuinOS usa o timer 1 para seu kernel.
E não há um timer de 16 bit para usar no Servo lib que precisa dele. 
Então nos adicionamos o ServoTimer2 lib  (http://code.google.com/p/tricopter/source/browse/trunk/arduino/#arduino%2Flibraries%2FServoTimer2 )
que usa o timer 2 de 8 bits para o servo.

Copie o seguinte arquivo deste site na pasta libraries/ServoTimer2  
ServoTimer2.cpp, ServoTimer2.h, keywords.txt






